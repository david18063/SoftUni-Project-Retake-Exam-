import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";

const BookDetails = () => {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [selectedVote, setSelectedVote] = useState(null);
  const [currency, setCurrency] = useState(localStorage.getItem("currency") || "lev");
  const [isFavorite, setIsFavorite] = useState(false); // To track if the book is already in favorites
  const loggedUser = localStorage.getItem("loggedUser");
  const userData = JSON.parse(localStorage.getItem("loggedUser"));
  const userId = userData?.ID; // Get user ID
  const userType = userData?.UserType;
  const navigate = useNavigate();

  const handleEdit = () => {
    navigate(`/editbook/${id}`);
  };

  useEffect(() => {
    fetch(`http://localhost:5000/books/${id}`)
      .then((response) => response.json())
      .then((data) => {
        setBook(data);
        checkIfFavorite(data.ID); // Check if the book is already a favorite
      })
      .catch((error) => console.error("‚ùå Error fetching book details:", error));
  }, [id]);

  // Check if the book is already in the user's favorites
  const checkIfFavorite = async (bookId) => {
    if (!userId) return;

    try {
      const response = await fetch(`http://localhost:5000/favourites/check/${userId}/${bookId}`);
      const data = await response.json();
      setIsFavorite(data.isFavorite); // Update the state if the book is a favorite
    } catch (error) {
      console.error("‚ùå Error checking if book is a favorite:", error);
    }
  };

  // Function to handle adding/removing the book to/from favorites
  const handleFavoriteToggle = async () => {
    if (!userId) {
      alert("üîí –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∑–∞ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –∫–Ω–∏–≥–∏ –≤ –ª—é–±–∏–º–∏!");
      return;
    }

    const url = isFavorite
      ? "http://localhost:5000/favourites/remove"
      : "http://localhost:5000/favourites"; // The endpoint for adding/removing favorites

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, bookId: id }),
      });

      if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);

      const data = await response.json();
      if (data.success) {
        setIsFavorite(!isFavorite); // Toggle favorite state
        alert(isFavorite ? "‚ùå –ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞ –æ—Ç –ª—é–±–∏–º–∏!" : "‚úÖ –ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–∞ –≤ –ª—é–±–∏–º–∏!");
      } else {
        alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ/–ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∫–Ω–∏–≥–∞—Ç–∞ –æ—Ç –ª—é–±–∏–º–∏!");
      }
    } catch (error) {
      console.error("‚ùå Error toggling favorite:", error);
      alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ/–ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ª—é–±–∏–º–∞—Ç–∞ –∫–Ω–∏–≥–∞!");
    }
  };

  const convertPrice = (price) => {
    const exchangeRates = { lev: 1, dollar: 0.55, euro: 0.51 };
    const symbols = { lev: "–ª–≤.", dollar: "$", euro: "‚Ç¨" };

    return `${(price * (exchangeRates[currency] || 1)).toFixed(2)} ${symbols[currency]}`;
  };

  const handleVoteChange = (event) => setSelectedVote(parseInt(event.target.value, 10));

  const handleVoteSubmit = async (event) => {
    event.preventDefault();

    if (!userId) {
      alert("üîí –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∑–∞ –¥–∞ –≥–ª–∞—Å—É–≤–∞—Ç–µ!");
      return;
    }

    if (!selectedVote) {
      alert("‚ùå –ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –æ—Ü–µ–Ω–∫–∞!");
      return;
    }

    try {
      const response = await fetch("http://localhost:5000/vote", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, bookId: id, vote: selectedVote }),
      });

      if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);

      const data = await response.json();
      alert(data.success ? "‚úÖ –ì–ª–∞—Å—É–≤–∞–Ω–µ—Ç–æ –µ —É—Å–ø–µ—à–Ω–æ!" : "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–ª–∞—Å—É–≤–∞–Ω–µ—Ç–æ!");
    } catch (error) {
      console.error("‚ùå Error submitting vote:", error);
      alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –≥–ª–∞—Å–∞!");
    }
  };

  const addToCart = async () => {
    if (!userId) {
      alert("üîí –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∑–∞ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –∫–Ω–∏–≥–∏ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞!");
      return;
    }

    try {
      const response = await fetch("http://localhost:5000/cart", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, bookId: id }),
      });

      if (!response.ok) throw new Error(`HTTP Error! Status: ${response.status}`);

      const data = await response.json();
      alert(data.success ? "‚úÖ –ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–∞ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞!" : "‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ!");
    } catch (error) {
      console.error("‚ùå Error adding to cart:", error);
      alert("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞!");
    }
  };

  if (!book) return <p>‚è≥ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–µ—Ç–∞–π–ª–∏—Ç–µ –∑–∞ –∫–Ω–∏–≥–∞—Ç–∞...</p>;

  return (
    <div className="center_content">
      <div className="center_title_bar">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</div>
      <div className="prod_box_big">
        <div className="center_prod_box_big">
          <div className="product_img_big">
            <img src={book.ImagePath} alt={book.Name} style={{ width: "110px", height: "165px" }} />
          </div>
          <div className="details_big_box">
            <div className="product_title_big">{book.Name}</div>
            <div className="specifications">
              <p>–ê–≤—Ç–æ—Ä: <span className="blue">{book.Author}</span></p>
              <p>–ò–∑–¥–∞—Ç–µ–ª—Å—Ç–≤–æ: <span className="blue">{book.Publisher}</span></p>
            </div>

            {/* üîπ Voting System */}
            <div>
              <form onSubmit={handleVoteSubmit}>
                <label>–û—Ü–µ–Ω–∫–∞: </label>
                {[1, 2, 3, 4, 5].map((num) => (
                  <label key={num}>
                    <input
                      type="radio"
                      name="vote"
                      value={num}
                      checked={selectedVote === num}
                      onChange={handleVoteChange}
                    />
                    {num}
                  </label>
                ))}
                &nbsp;
                <button type="submit">–ì–ª–∞—Å—É–≤–∞–π</button>
              </form>
            </div>

            <div className="prod_price_big">
              <label>–¶–µ–Ω–∞: </label>
              <div>
                <span className="reduce">{convertPrice(book.OldPrice)}</span>
                <span className="price">{convertPrice(book.Price)}</span>
              </div>
            </div>

            <div style={{ marginTop: "10px", marginBottom: "20px" }}>
              <button onClick={addToCart}>üõí –î–æ–±–∞–≤–∏ –≤ –∫–æ—à–Ω–∏—Ü–∞—Ç–∞</button> &nbsp;
              <button onClick={handleFavoriteToggle}>
                {isFavorite ? "–ü—Ä–µ–º–∞—Ö–Ω–∏ –æ—Ç –ª—é–±–∏–º–∏" : "–í –ª—é–±–∏–º–∏"}
              </button> &nbsp;
              {userType === 1 && (
                <button onClick={handleEdit}>–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ</button>
              )}
            </div>
          </div>
        </div>
      </div>
      <div className="prod_box_big">
        <label style={{ fontSize: 15 }} htmlFor="description"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong></label>
        <p id="description" style={{ fontSize: 15 }}>{book.Description}</p>
      </div>
    </div>
  );
};

export default BookDetails;
